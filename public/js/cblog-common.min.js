class MathJax3Renderer {
  constructor() {
    this._defaultConfig = {
      document: document,
      engine: 1,
      entryScript: '../js/tex-mml-chtml.js',
      isEnabled: true
    };
    this._defaultMathJaxConfig = {
      tex: {
        inlineMath: [
          ['$', '$'],
          ['\\(', '\\)']
        ],
        processEscapes: !0,
        tags: 'ams',
        useLabelIds: !0,
        macros: {
          bm: '\\boldsymbol'
        },
        packages: {
          '[+]': ['noerrors', 'extpfeil']
        }
      },
      options: {
        processHtmlClass: 'math',
        ignoreHtmlClass: 'tex2jax_ignore'
      },
      loader: {
        load: ['[tex]/noerrors', '[tex]/extpfeil']
      },
      startup: {
        typeset: !1
      }
    };
    this._config = this._defaultConfig;
  }
  config(r) {
    return (this._config = Object.assign({}, this._defaultConfig, r)), this;
  }
  render(r, o) {
    return this._config.isEnabled
      ? this.init()
          .then(l => {
            l &&
              (l.startup.promise = l.startup.promise.then(() =>
                l.typesetPromise([r]).then(() => {
                  var r;
                  try {
                    null === (r = this._config.onRendered) || void 0 === r || r.call(void 0, l);
                  } catch (r) {
                    console.error(r);
                  }
                  try {
                    null == o || o.call(void 0);
                  } catch (r) {
                    console.error(r);
                  }
                })
              ));
          })
          .catch(console.warn)
      : Promise.resolve();
  }
  init() {
    var r;
    return (
      null !== (r = this._initTask) && void 0 !== r
        ? r
        : (this._initTask = new Promise((r, o) => {
            var l, p;
            const { entryScript: g, tapMathJaxConfig: v, document: _ } = this._config,
              C = null !== (l = _.defaultView) && void 0 !== l ? l : window;
            C.MathJax =
              null !== (p = null == v ? void 0 : v.call(void 0, Object.assign({}, this._defaultMathJaxConfig))) &&
              void 0 !== p
                ? p
                : Object.assign({}, this._defaultMathJaxConfig);
            C.MathJax.startup || (C.MathJax.startup = {});
            C.MathJax.startup.ready = () => {
              var o, l;
              null === (l = null === (o = C.MathJax) || void 0 === o ? void 0 : o.startup) ||
                void 0 === l ||
                l.defaultReady();
              r(C.MathJax);
            };
            loadScript({
              src: g,
              id: 'mathjax',
              executionStrategy: 'defer',
              appendTo: C.document.head
            }).catch(o);
          }))
    ).catch(() => (this._initTask = void 0));
  }
}

var loadScript = function (r) {
  // $.getScript('js/tex-mml-chtml.js', function () {});
};

var loadCss = function (opt) {
  const href = opt.href;
  const id = opt.id;
  return new Promise((resolve, reject) => {
    /** @type {HTMLLinkElement} */
    const link = document.querySelector('link[href="'.concat(href, '"]')) ?? document.createElement('link');
    link.href = href;
    link.id = id;
    link.rel = 'stylesheet';
    link.type = 'text/css';
    link.onload = function () {
      resolve(link);
    };
    link.onerror = function () {
      reject();
    };
    document.head.appendChild(link);
  });
};

window.mathRender = (config => {
  return new MathJax3Renderer().config(config);
})({
  engine: 1,
  isEnabled: true
});

var cb_mathjax_render = function (elementId) {
  if (window.cb_enable_mathjax)
    if ($('.katex-mathml').length && window.mathEngine !== 2)
      $('head').append($('<link rel="stylesheet" type="text/css" />').attr('href', '/css/katex.min.css')),
        $.getScript('/js/katex.min.js', function () {
          $.getScript('/js/auto-render.min.js', function () {
            renderMathInElement(document.getElementById('cnblogs_post_body'));
          });
        });
    else {
      elementId.startsWith('#') && (elementId = elementId.slice(1));
      var math = document.getElementById(elementId);
      window.mathRender.render(math);
    }
};
cb_mathjax_render('cnblogs_post_body');

var AddToWz = function (entryId) {
  var width = 480,
    height = 400,
    leftVal = (screen.width - width) / 2,
    topVal = (screen.height - height) / 2,
    d = document,
    title = document.getElementsByTagName('title')[0].innerHTML,
    base64 = 1,
    targetURL,
    url;
  try {
    title = window.btoa(unescape(encodeURIComponent(title.replace(/\"/g, '&quot;'))));
  } catch (e) {
    title = encodeURIComponent(title.replace(/</g, '&lt;').replace(/>/g, '&gt;'));
    base64 = 0;
  }
  targetURL = new URL(location.href);
  targetURL.hash = '';
  targetURL.search = '';
  url =
    'https://wz.cnblogs.com/create?t=' +
    title +
    '&u=' +
    encodeURIComponent(targetURL.toString()) +
    '&c=' +
    encodeURIComponent('') +
    '&bid=' +
    entryId +
    '&i=0';
  base64 == 1 && (url += '&base64=1');
  window.open(
    url,
    '_blank',
    'width=' + width + ',height=' + height + ',toolbars=0,resizable=1,left=' + leftVal + ',top=' + topVal
  );
};

function updatePostStats(postIds, setViewCount, setFeedbackCount, setDiggCount, setBuryCount) {
  $.ajax({
    url: getAjaxBaseUrl() + 'GetPostStat',
    method: 'post',
    data: JSON.stringify(postIds),
    contentType: 'application/json; charset=utf-8',
    dataType: 'json',
    success: function (data) {
      for (var i = 0; i < data.length; i++)
        setViewCount && setViewCount(data[i].postId, data[i].viewCount),
          setFeedbackCount && setFeedbackCount(data[i].postId, data[i].feedbackCount),
          setDiggCount && setDiggCount(data[i].postId, data[i].diggCount),
          setBuryCount && setBuryCount(data[i].postId, data[i].buryCount);
    }
  });
}

var commentEditor = {};
var initCommentEditor = function () {
  commentEditor.removeComment = function (app, userId, postId) {
    window.localStorage.removeItem(commentEditor.currentEditor.getDraftKey(app, userId, postId));
  };
  commentEditor.currentEditor = {};
  commentEditor.currentEditor.textbox = document.getElementById('tbCommentBody');
  commentEditor.currentEditor.getDraftKey = function (app, userId, postId) {
    return `${app}-draft-${userId}-${postId}`;
  };
  commentEditor.currentEditor.moveCaretBy = function (count) {
    commentEditor.currentEditor.hasSelection()
      ? ((commentEditor.currentEditor.textbox.selectionStart += count),
        (commentEditor.currentEditor.textbox.selectionEnd += count))
      : count > 0
      ? (commentEditor.currentEditor.textbox.selectionStart += count)
      : (commentEditor.currentEditor.textbox.selectionEnd += count);
  };
  commentEditor.currentEditor.hasSelection = function () {
    return commentEditor.currentEditor.textbox.selectionEnd !== commentEditor.currentEditor.textbox.selectionStart;
  };
  commentEditor.currentEditor.getSelection = function () {
    let lo = commentEditor.currentEditor.textbox.selectionStart,
      hi = commentEditor.currentEditor.textbox.selectionEnd;
    return commentEditor.currentEditor.textbox.value.substring(lo, hi);
  };
  commentEditor.currentEditor.insertToCaret = function (value) {
    if (!document.execCommand('insertText', !1, value)) {
      let index = commentEditor.currentEditor.textbox.selectionEnd;
      commentEditor.currentEditor.textbox.setRangeText(value, index, index, 'end');
    }
  };
  commentEditor.currentEditor.insertToCaret = function (value) {
    if (!document.execCommand('insertText', !1, value)) {
      let index = commentEditor.currentEditor.textbox.selectionEnd;
      commentEditor.currentEditor.textbox.setRangeText(value, index, index, 'end');
    }
  };
  commentEditor.currentEditor.replaceSelectionWith = function (replacement) {
    let diff = replacement.length - commentEditor.currentEditor.getSelection().length,
      newStart = commentEditor.currentEditor.textbox.selectionStart,
      newEnd = commentEditor.currentEditor.textbox.selectionEnd + diff;
    document.execCommand('insertText', !1, replacement) ||
      commentEditor.currentEditor.textbox.setRangeText(replacement);
    commentEditor.currentEditor.textbox.selectionStart = newStart;
    commentEditor.currentEditor.textbox.selectionEnd = newEnd;
    commentEditor.currentEditor.textbox.focus();
  };
  commentEditor.currentEditor.wrapSelectionWith = function (prefix, suffix, lineByline) {
    let value = commentEditor.currentEditor.getSelection(),
      lines,
      replacement,
      i;
    if (value.length === 0) {
      commentEditor.currentEditor.insertToCaret(prefix + suffix);
      return;
    }
    if (lineByline) {
      for (lines = value.split('\n'), replacement = '', i = 0; i < lines.length; i++)
        lines[i].length > 0 && (replacement += prefix + lines[i] + suffix),
          i !== lines.length - 1 && (replacement += '\n');
      commentEditor.currentEditor.replaceSelectionWith(replacement);
    } else commentEditor.currentEditor.replaceSelectionWith(prefix + value + suffix);
    commentEditor.currentEditor.textbox.focus();
  };
  commentEditor.currentEditor.quote = function () {
    commentEditor.currentEditor.wrapSelectionWith('> ', '', !0);
  };
  commentEditor.currentEditor.bold = function () {
    commentEditor.currentEditor.wrapSelectionWith('**', '**', !0);
    commentEditor.currentEditor.hasSelection() || commentEditor.currentEditor.moveCaretBy(-2);
  };
  commentEditor.currentEditor.link = function () {
    commentEditor.currentEditor.wrapSelectionWith('[', ']()', !0);
    commentEditor.currentEditor.moveCaretBy(-1);
  };
  commentEditor.currentEditor.code = function () {
    var selection, newlineIndex, suffix;
    if (!commentEditor.currentEditor.hasSelection()) {
      commentEditor.currentEditor.insertToCaret('``');
      commentEditor.currentEditor.moveCaretBy(-1);
      return;
    }
    selection = commentEditor.currentEditor.getSelection();
    newlineIndex = selection.lastIndexOf('\n');
    newlineIndex > 0
      ? ((suffix = '```\n'),
        newlineIndex !== selection.length - 1 && (suffix = '\n' + suffix),
        commentEditor.currentEditor.wrapSelectionWith('```\n', suffix, !1))
      : commentEditor.currentEditor.wrapSelectionWith('`', '`', !1);
  };
  commentEditor.preview = function () {
    $('#btn_preview_comment').addClass('active').prop('onclick', null).off('click');
    $('#btn_edit_comment')
      .removeClass('active')
      .on('click', function () {
        return commentEditor.unPreview();
      });
    $('.commentbox_title_right').hide();
    $('.commentbox_footer').hide();
    let content = $('#tbCommentBody').val();
    content = content ? content.trim() : '';
    $('#tbCommentBody').hide();
    $('#tbCommentBodyPreview').show();
    $('#tbCommentBodyPreviewBody').html('正在加载预览……');
    if (content.length > 4e3) {
      $('#tbCommentBodyPreviewBody').html('评论内容过长，超过4000个字数限制！当前长度：' + content.length);
      return;
    }
    if (content.trim().length === 0) {
      $('#tbCommentBodyPreviewBody').html('');
      return;
    }
    if (window.cb_entryId <= 0) {
      $('#tbCommentBodyPreviewBody').html('postId不正确');
      return;
    }
    $('#btn_comment_submit').attr('disabled', 'disabled');
    const comment = {};
    comment.postId = window.cb_entryId;
    comment.body = content;
    let parentCommentId = $('#span_parentcomment_id').text();
    comment.parentCommentId = /(\d)/.test(parentCommentId) ? parseInt(parentCommentId, 10) : 0;
    $.ajax({
      url: window.getAjaxBaseUrl() + 'PostComment/Preview.aspx',
      data: JSON.stringify(comment),
      type: 'post',
      dataType: 'json',
      contentType: 'application/json; charset=UTF-8',
      timeout: 5e3,
      success: function (data) {
        if (data)
          $('#tbCommentBodyPreviewBody').html(data.message),
            markdown_highlight('#tbCommentBodyPreviewBody'),
            cb_mathjax_render('tbCommentBodyPreviewBody'),
            $('#btn_comment_submit').removeAttr('disabled');
        else
          $('#tbCommentBodyPreviewBody').html('抱歉！预览加载失败！请与管理员联系(contact@cnblogs.com)。'),
            $('#btn_comment_submit').removeAttr('disabled');
      },
      error: function (xhr, textStatus) {
        xhr.status === 500
          ? $('#tbCommentBodyPreviewBody').html('抱歉！发生了错误！麻烦反馈至contact@cnblogs.com')
          : xhr.status > 0
          ? $('#tbCommentBodyPreviewBody').html(
              '抱歉！预览加载失败！错误码：' + xhr.status + ' 错误信息：' + xhr.responseText
            )
          : $('#tbCommentBodyPreviewBody').html(
              '抱歉！预览加载失败！xhr.status: ' + xhr.status + ', textStatus: ' + textStatus
            );
        $('#btn_comment_submit').removeAttr('disabled');
      }
    });
  };
  commentEditor.unPreview = function () {
    $('#btn_preview_comment')
      .removeClass('active')
      .on('click', function () {
        return commentEditor.preview();
      });
    $('#btn_edit_comment').addClass('active').prop('onclick', null).off('click');
    $('.commentbox_title_right').show();
    $('.commentbox_footer').show();
    $('#tbCommentBodyPreview').hide();
    $('#tbCommentBody').show();
  };
};

/** 图片管理器 */
class ZoomManager {
  enabled;
  minWidth;
  background;
  constructor() {
    this.enabled = !0;
    this.minWidth = 300;
    this.background = 'rgba(0, 0, 0, .8)';
  }
  apply(selector) {
    /*
    if (this.enabled) {
      var l = this.minWidth,
        p = window.innerHeight,
        g = this.background,
        v = $(selector).filter(function (index, el) {
          var l, p, g, v;
          return !(
            el.onclick ||
            (null !== (l = el.parentElement) && void 0 !== l && l.onclick) ||
            'a' === (null === (p = el.parentElement) || void 0 === p ? void 0 : p.tagName.toLowerCase()) ||
            (null !== (g = el.parentElement) &&
              void 0 !== g &&
              null !== (v = g.parentElement) &&
              void 0 !== v &&
              v.onclick)
          );
        }),
        _ = function (o) {
          if (o.naturalWidth > l)
            if (o.naturalHeight < p)
              tt()(o, {
                background: g
              });
            else {
              var r = o.naturalHeight;
              o.naturalWidth > document.documentElement.clientWidth &&
                (r *= document.documentElement.clientWidth / o.naturalWidth);
              tt()(o, {
                background: g,
                scrollOffset: o.naturalHeight,
                container: {
                  top: 0,
                  left: 0,
                  height: r,
                  width: document.documentElement.clientWidth
                }
              });
            }
        };
      ot()(v.get()).on('progress', function (o, r) {
        var l = null == r ? void 0 : r.img,
          p;
        l &&
          (0 === l.naturalWidth &&
            0 === l.naturalHeight &&
            (p = setInterval(function () {
              0 !== l.naturalWidth && (clearInterval(p), _(l));
            }, 800)),
          _(l));
      });
    }
    */
  }
}

function parse(json) {
  return json;
}

const testUri = function (name, type = 'json') {
  const baseUri = '/data/test/';
  return `${baseUri}${name}.${type}`;
};
/**
 * 在开发过程拦截ajax请求
 */
const interceptAjax = function () {
  window.getAjaxBaseUrl = () => '/data/';
  $.ajaxSetup({
    beforeSend: function (xhr, settings) {
      // console.log('拦截');
      // console.log(xhr);
      // 统一请求改为 get
      // 便于加载测试的静态数据
      settings.type = 'get';
      const uri = settings.url;
      // console.log(uri);
      if (uri) {
        if (uri.indexOf('vote/comment') > 0) {
          // 支持/返回 评论
          settings.url = testUri('vote/comment-1');
        } else if (uri.indexOf('widgets') > 0) {
          settings.url = testUri('widgets');
        } else if (uri.indexOf('Follow/FollowBlogger.aspx') > 0) {
          // 关注
          settings.url = testUri('Follow/FollowBlogger', 'text');
        } else if (uri.indexOf('Follow/RemoveFollow.aspx') > 0) {
          // 取消关注
          settings.url = testUri('Follow/RemoveFollow', 'text');
        } else if (uri.indexOf('vote/blogpost') > 0) {
          // 推荐博文
          settings.url = testUri('vote/blogpost-1');
        } else if (uri.indexOf('blog-stats') > 0) {
          // 获取博客状态
          settings.url = testUri('blog-stats', 'text');
        } else if (uri.indexOf('user/userinfo') > 0) {
          // 获取用户信息
          settings.url = '/data/test/userinfo.json';
        } else if (uri.indexOf('comments-block') > 0) {
          // 获取评论列表
          settings.url = testUri('comments-block');
        } else if (uri.indexOf('PostComment/Add.aspx') > 0) {
          // 添加评论
          settings.url = testUri('comment/Add');
        } else if (uri.indexOf('PostComment/Update.aspx') > 0) {
          // 更新评论
          settings.url = testUri('comment/Update');
        } else if (uri.indexOf('comment/DeleteComment.aspx') > 0) {
          // 删除评论
          settings.url = testUri('comment/DeleteComment');
        } else if (uri.indexOf('comment/GetCommentBody.aspx') > 0) {
          // 获取评论体
          settings.url = testUri('comment/GetCommentBody', 'text');
        } else if (uri.indexOf('PostComment/Preview.aspx') > 0) {
          // 预览评论
          settings.url = testUri('comment/preview');
        } else if (uri.indexOf('post-accessories') > 0) {
          settings.url = testUri('post-accessories');
        } else if (uri.indexOf('GetPostStat') > 0) {
          settings.url = testUri('GetPostStat');
        } else if (uri.indexOf(`files/blogs/${currentBlogId}/coverList.json`) > 0) {
          settings.url = `${testUri('coverList')}?${uri.split('?')[1]}`;
        } else if (uri.indexOf(`files/blogs/${currentBlogId}/signList.json`) > 0) {
          settings.url = `${testUri('signList')}?${uri.split('?')[1]}`;
        }
        // else if(uri.indexOf('') > 0) {}
      }
    }
  });
};

var tagOrderer = function (id, func, isActive, manager, initalIsDesc = true) {
  let orderer = {};
  orderer.manager = manager;
  orderer.label = document.getElementById(id);
  orderer.name = document.getElementById(id).innerText;
  orderer.isActive = isActive;
  orderer.isDesc = !initalIsDesc;
  orderer.isDefault = $('#' + id).hasClass('default-tag-order');
  orderer.orderMethod = func;
  orderer.click = function () {
    manager.orderers.forEach(function (o) {
      o.isActive = !1;
    });
    orderer.isActive = !0;
    orderer.isDesc = !orderer.isDesc;
    orderer.showStatus();
    manager.sortTag(function (a, b) {
      return orderer.isDesc ? func(b, a) : func(a, b);
    });
    manager.orderers.forEach(function (o) {
      o.showStatus();
    });
  };
  orderer.showStatus = function () {
    orderer.label.innerText = orderer.name + (orderer.isActive ? (orderer.isDesc ? '⬇' : '⬆') : '');
  };
  orderer.label.addEventListener('click', orderer.click);
  return orderer;
};

var initSideColumnManager = function () {
  var manager = {};
  return (
    (manager.loadMore = function (caller) {
      $(caller)
        .text('收起')
        .removeAttr('onclick')
        .off('click')
        .on('click', function () {
          manager.showLess(caller);
        });
      $(caller).parent().parent().find('*[data-category-list-item-visible=false]').show();
    }),
    (manager.showLess = function (caller) {
      $(caller)
        .text('更多')
        .removeAttr('onclick')
        .off('click')
        .on('click', function () {
          manager.loadMore(caller);
        });
      $(caller).parent().parent().find('*[data-category-list-item-visible=false]').hide();
    }),
    manager
  );
};

var sideColumnManager = initSideColumnManager();

var initTagsManager = function () {
  let that = {};
  that.tags = $('#MyTag1_dtTagList td').get();
  that.generateTagList = function () {
    let rowCount = Math.ceil(that.tags.length / 4),
      tbody = document.createElement('tbody');
    for (let row = 0; row < rowCount; row++) {
      let tr = document.createElement('tr');
      for (let col = 0; col < 4; col++) {
        let index = row + col * rowCount;
        index < that.tags.length && tr.appendChild(that.tags[index]);
      }
      tbody.appendChild(tr);
    }
    $('#MyTag1_dtTagList').html(tbody);
  };
  that.sortTag = function (sortFunc) {
    that.tags = that.tags.sort(sortFunc);
    that.generateTagList();
  };
  that.parseCustomOrder = function (element, defaultValue = 999999) {
    if (!element) return defaultValue;
    const value = element.getAttribute('data-custom-order');
    return +(value == null ? defaultValue : value);
  };
  that.parseUseCount = function (element, defaultValue = 0) {
    if (!element) return defaultValue;
    const value = element.getAttribute('data-use-count');
    return +(value == null ? defaultValue : value);
  };
  that.orderers = [
    tagOrderer(
      'tags_orderby_usecount',
      function (a, b) {
        let useA = $(a).children('.small').text().slice(1, -1),
          useB = $(b).children('.small').text().slice(1, -1),
          diff = useA - useB;
        return diff === 0 ? a.innerText.localeCompare(b.innerText) : diff;
      },
      !1,
      that
    ),
    tagOrderer(
      'tags_orderby_name',
      function (a, b) {
        return a.innerText.localeCompare(b.innerText);
      },
      !1,
      that,
      !1
    ),
    tagOrderer(
      'tags_orderby_custom',
      function (a, b) {
        return that.parseCustomOrder(a) - that.parseCustomOrder(b);
      },
      !1,
      that,
      !1
    )
  ];
  that.deactiveAll = function () {
    that.orderers.forEach(function (orderer) {
      orderer.isActive = !1;
    });
  };

  for (let i = 0; i < that.orderers.length; i++) {
    let orderer = that.orderers[i];
    orderer.isDefault && orderer.click();
  }
  return that;
};

interceptAjax();

function TreeCategoryPopup(selector) {}

var highlighter = {};
highlighter.highlighterOptions = {
  defaultTheme: 'cnblogs',
  lineNumberPluginPath: 'https://assets.cnblogs.com/scripts/highlightjs-line-numbers.min.js?v=2.4.245',
  scriptPath: 'https://assets.cnblogs.com/highlight/11.4.0/highlight.min.js?v=2.4.245',
  stylesheets: [],
  themeBaseUrl: '/css'
};

highlighter.link = void 0;

highlighter.setTheme = function (theme) {
  !theme && (theme = this.highlighterOptions.defaultTheme);
  const id = 'highlighter-theme-'.concat(theme);
  const href = ''.concat(this.highlighterOptions.themeBaseUrl, '/').concat(theme, '.css');
  if (this.link) {
    this.link.setAttribute('href', href);
    this.link.setAttribute('id', id);
  } else {
    const link = document.querySelector('link[href="'.concat(href, '"]')) ?? document.createElement('link');
    link.href = href;
    link.id = id;
    link.rel = 'stylesheet';
    link.type = 'text/css';
    link.onload = function () {
      // resolve(link);
      console.log('link');
    };
    link.onerror = function () {
      // reject();
      console.log('error');
    };
    this.link = link;
  }
  document.head.appendChild(this.link);
};

window.highlighter = highlighter;

// 绑定监听
window.addEventListener('load', function () {
  initCommentEditor();
  $('#btn_comment_submit').on('click', function () {
    return commentManager.postComment(), !1;
  });
  $('#btn_preview_comment').on('click', function () {
    return commentEditor.preview();
  });
  $('#btn_edit_comment').on('click', function () {
    return commentEditor.unPreview();
  });
  $('#ubb_quote').on('click', function () {
    commentEditor.currentEditor.quote();
    commentEditor.currentEditor.textbox.focus();
  });
  $('#ubb_bold').on('click', function () {
    commentEditor.currentEditor.bold();
    commentEditor.currentEditor.textbox.focus();
  });
  $('#ubb_url').on('click', function () {
    commentEditor.currentEditor.link();
    commentEditor.currentEditor.textbox.focus();
  });
  $('#ubb_code').on('click', function () {
    commentEditor.currentEditor.code();
    commentEditor.currentEditor.textbox.focus();
  });
});

var parseCover = function () {};
